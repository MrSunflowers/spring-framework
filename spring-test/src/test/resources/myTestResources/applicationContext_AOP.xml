<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
	   http://www.springframework.org/schema/beans/spring-beans.xsd
	   http://www.springframework.org/schema/context
	   https://www.springframework.org/schema/context/spring-context.xsd
	   http://www.springframework.org/schema/aop
	   https://www.springframework.org/schema/aop/spring-aop.xsd"
>

	<!--<context:annotation-config/>
	<context:component-scan base-package="org.springframework.myTest"/>-->

	<bean name="testServiceImpl" class="org.springframework.myTest.aop.demo.TestServiceImpl" />

	<bean name="transactionManager" class="org.springframework.myTest.aop.demo.TransactionManager" />

	<aop:config proxy-target-class="true" expose-proxy="true" >

		<!--切入点-->
		<aop:pointcut id="transactionPointcut" expression="execution(* org.springframework.myTest..*Service*.*(..))"/>

		<!-- 切面 = 切入点 + 通知 -->
		<aop:aspect ref="transactionManager" >
			<!--通知:
				在方法执行的什么时机（方法前/方法后/方法前后）做什么（增强的功能）
				aop:before（前置增强）：在方法执行之前执行增强；
				aop:after-returning（后置增强）：在方法正常执行完成之后执行增强；
				aop:after-throwing（异常增强）：在方法抛出异常退出时执行增强，可以通过配置 throwing 来获得拦截到的异常信息；
				aop:after（最终增强）：在方法执行之后执行，相当于在 finally 里面执行；
				aop:around（环绕增强）：最强大的一种增强类型。 环绕增强可以在方法调用前后完成自定义的行为，环绕通知有两个要求：
					1.方法必须要返回一个Object（返回的结果）
					2.方法的第一个参数必须是ProceedingJoinPoint（可以继续向下传递的切入点）
			-->
			<!--在 transactionPointcut 方法执行之前执行 begin 方法-->
			<aop:before method="begin" pointcut-ref="transactionPointcut" />

			<!--在 transactionPointcut 方法执行之后执行 commit 方法-->
			<aop:after-returning method="commit" pointcut-ref="transactionPointcut" />

			<!--在 transactionPointcut 方法执行抛出异常之后执行 rollBack 方法-->
			<aop:after-throwing method="rollBack" pointcut-ref="transactionPointcut" throwing="e" />

			<!--在 transactionPointcut 方法执行后执行 close 方法,相当于在 finally 里面执行-->
			<aop:after method="close" pointcut-ref="transactionPointcut"  />

			<!--<aop:around method="around" pointcut-ref="transactionPointcut" />-->

		</aop:aspect>

	</aop:config>

</beans>